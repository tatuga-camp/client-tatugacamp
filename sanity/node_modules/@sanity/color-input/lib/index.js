'use strict';

var _templateObject, _templateObject2;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
Object.defineProperty(exports, '__esModule', {
  value: true
});
var sanity = require('sanity');
var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var lodash = require('lodash');
var ui = require('@sanity/ui');
var icons = require('@sanity/icons');
var common = require('react-color/lib/components/common');
var reactColor = require('react-color');
var styled = require('styled-components');
var color$1 = require('react-color/lib/helpers/color');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var styled__default = /*#__PURE__*/_interopDefaultCompat(styled);
const hslaColor = sanity.defineType({
  title: "Hue Saturation Lightness",
  name: "hslaColor",
  type: "object",
  fields: [{
    name: "h",
    type: "number",
    title: "Hue"
  }, {
    name: "s",
    type: "number",
    title: "Saturation"
  }, {
    name: "l",
    type: "number",
    title: "Lightness"
  }, {
    name: "a",
    type: "number",
    title: "Alpha"
  }]
});
const rgbaColor = sanity.defineType({
  title: "Red Green Blue (rgb)",
  name: "rgbaColor",
  type: "object",
  fields: [{
    name: "r",
    type: "number",
    title: "Red"
  }, {
    name: "g",
    type: "number",
    title: "Green"
  }, {
    name: "b",
    type: "number",
    title: "Blue"
  }, {
    name: "a",
    type: "number",
    title: "Alpha"
  }]
});
const ColorPickerFields = _ref => {
  let {
    onChange,
    rgb,
    hsl,
    hex,
    disableAlpha
  } = _ref;
  var _a;
  const {
    sanity
  } = ui.useTheme();
  const inputStyles = react.useMemo(() => ({
    input: {
      width: "80%",
      padding: "4px 10% 3px",
      border: "none",
      boxShadow: "inset 0 0 0 1px ".concat(sanity.color.input.default.enabled.border),
      color: sanity.color.input.default.enabled.fg,
      backgroundColor: sanity.color.input.default.enabled.bg,
      fontSize: sanity.fonts.text.sizes[0].fontSize,
      textAlign: "center"
    },
    label: {
      display: "block",
      textAlign: "center",
      fontSize: sanity.fonts.label.sizes[0].fontSize,
      color: sanity.color.base.fg,
      paddingTop: "3px",
      paddingBottom: "4px",
      textTransform: "capitalize"
    }
  }), [sanity]);
  const handleChange = react.useCallback(data => {
    if ("hex" in data && data.hex && color$1.isValidHex(data.hex)) {
      onChange({
        hex: data.hex,
        source: "hex"
      });
    } else if (rgb && ("r" in data && data.r || "g" in data && data.g || "b" in data && data.b)) {
      onChange({
        r: Number(data.r) || rgb.r,
        g: Number(data.g) || rgb.g,
        b: Number(data.b) || rgb.b,
        a: rgb.a,
        source: "rgb"
      });
    } else if (hsl && "a" in data && data.a) {
      let alpha = Number(data.a);
      if (alpha < 0) {
        alpha = 0;
      } else if (alpha > 100) {
        alpha = 100;
      }
      alpha /= 100;
      onChange({
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a: alpha,
        source: "hsl"
      });
    }
  }, [onChange, hsl, rgb]);
  return /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
    children: [/* @__PURE__ */jsxRuntime.jsx(ui.Box, {
      flex: 2,
      marginRight: 1,
      children: /* @__PURE__ */jsxRuntime.jsx(common.EditableInput, {
        style: inputStyles,
        label: "hex",
        value: hex == null ? void 0 : hex.replace("#", ""),
        onChange: handleChange
      })
    }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
      flex: 1,
      marginRight: 1,
      children: /* @__PURE__ */jsxRuntime.jsx(common.EditableInput, {
        style: inputStyles,
        label: "r",
        value: rgb == null ? void 0 : rgb.r,
        onChange: handleChange,
        dragLabel: true,
        dragMax: 255
      })
    }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
      flex: 1,
      marginRight: 1,
      children: /* @__PURE__ */jsxRuntime.jsx(common.EditableInput, {
        style: inputStyles,
        label: "g",
        value: rgb == null ? void 0 : rgb.g,
        onChange: handleChange,
        dragLabel: true,
        dragMax: 255
      })
    }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
      flex: 1,
      marginRight: 1,
      children: /* @__PURE__ */jsxRuntime.jsx(common.EditableInput, {
        style: inputStyles,
        label: "b",
        value: rgb == null ? void 0 : rgb.b,
        onChange: handleChange,
        dragLabel: true,
        dragMax: 255
      })
    }), !disableAlpha && /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
      flex: 1,
      children: /* @__PURE__ */jsxRuntime.jsx(common.EditableInput, {
        style: inputStyles,
        label: "a",
        value: Math.round(((_a = rgb == null ? void 0 : rgb.a) != null ? _a : 1) * 100),
        onChange: handleChange,
        dragLabel: true,
        dragMax: 100
      })
    })]
  });
};
const ColorBox = styled__default.default(ui.Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n"])));
const ReadOnlyContainer = styled__default.default(ui.Flex)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin-top: 6rem;\n  background-color: var(--card-bg-color);\n  position: relative;\n  width: 100%;\n"])));
const ColorPickerInner = props => {
  var _a, _b, _c;
  const {
    width,
    color: {
      rgb,
      hex,
      hsv,
      hsl
    },
    onChange,
    onUnset,
    disableAlpha,
    readOnly
  } = props;
  if (!hsl || !hsv) {
    return null;
  }
  return /* @__PURE__ */jsxRuntime.jsx("div", {
    style: {
      width
    },
    children: /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
      padding: 1,
      border: true,
      radius: 1,
      children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
        space: 2,
        children: [!readOnly && /* @__PURE__ */jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [/* @__PURE__ */jsxRuntime.jsx(ui.Card, {
            overflow: "hidden",
            style: {
              position: "relative",
              height: "5em"
            },
            children: /* @__PURE__ */jsxRuntime.jsx(common.Saturation, {
              onChange,
              hsl,
              hsv
            })
          }), /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
            shadow: 1,
            radius: 3,
            overflow: "hidden",
            style: {
              position: "relative",
              height: "10px"
            },
            children: /* @__PURE__ */jsxRuntime.jsx(common.Hue, {
              hsl,
              onChange: !readOnly && onChange
            })
          }), !disableAlpha && /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
            shadow: 1,
            radius: 3,
            overflow: "hidden",
            style: {
              position: "relative",
              height: "10px"
            },
            children: /* @__PURE__ */jsxRuntime.jsx(common.Alpha, {
              rgb,
              hsl,
              onChange
            })
          })]
        }), /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
          children: [/* @__PURE__ */jsxRuntime.jsxs(ui.Card, {
            flex: 1,
            radius: 2,
            overflow: "hidden",
            style: {
              position: "relative",
              minWidth: "4em"
            },
            children: [/* @__PURE__ */jsxRuntime.jsx(common.Checkboard, {}), /* @__PURE__ */jsxRuntime.jsx(ColorBox, {
              style: {
                backgroundColor: "rgba(".concat(rgb == null ? void 0 : rgb.r, ",").concat(rgb == null ? void 0 : rgb.g, ",").concat(rgb == null ? void 0 : rgb.b, ",").concat(rgb == null ? void 0 : rgb.a, ")")
              }
            }), readOnly && /* @__PURE__ */jsxRuntime.jsx(ReadOnlyContainer, {
              padding: 2,
              paddingBottom: 1,
              sizing: "border",
              justify: "space-between",
              children: /* @__PURE__ */jsxRuntime.jsxs(ui.Stack, {
                space: 3,
                marginTop: 1,
                children: [/* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                  size: 3,
                  weight: "bold",
                  children: hex
                }), /* @__PURE__ */jsxRuntime.jsxs(ui.Inline, {
                  space: 3,
                  children: [/* @__PURE__ */jsxRuntime.jsxs(ui.Text, {
                    size: 1,
                    children: [/* @__PURE__ */jsxRuntime.jsx("strong", {
                      children: "RGB: "
                    }), rgb == null ? void 0 : rgb.r, " ", rgb == null ? void 0 : rgb.g, " ", rgb == null ? void 0 : rgb.b]
                  }), /* @__PURE__ */jsxRuntime.jsxs(ui.Text, {
                    size: 1,
                    children: [/* @__PURE__ */jsxRuntime.jsx("strong", {
                      children: "HSL: "
                    }), " ", Math.round((_a = hsl == null ? void 0 : hsl.h) != null ? _a : 0), " ", Math.round((_b = hsl == null ? void 0 : hsl.s) != null ? _b : 0), "%", " ", Math.round((_c = hsl == null ? void 0 : hsl.l) != null ? _c : 0)]
                  })]
                })]
              })
            })]
          }), !readOnly && /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
            align: "flex-start",
            marginLeft: 2,
            children: [/* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              style: {
                width: 200
              },
              children: /* @__PURE__ */jsxRuntime.jsx(ColorPickerFields, {
                rgb,
                hsl,
                hex,
                onChange,
                disableAlpha
              })
            }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              marginLeft: 2,
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
                onClick: onUnset,
                title: "Delete color",
                icon: icons.TrashIcon,
                tone: "critical"
              })
            })]
          })]
        })]
      })
    })
  });
};
const ColorPicker = reactColor.CustomPicker(ColorPickerInner);
const DEFAULT_COLOR = {
  hex: "#24a3e3",
  hsl: {
    h: 200,
    s: 0.7732,
    l: 0.5156,
    a: 1
  },
  hsv: {
    h: 200,
    s: 0.8414,
    v: 0.8901,
    a: 1
  },
  rgb: {
    r: 46,
    g: 163,
    b: 227,
    a: 1
  },
  source: "hex"
};
function ColorInput(props) {
  var _a;
  const {
    onChange,
    readOnly
  } = props;
  const value = props.value;
  const type = props.schemaType;
  const focusRef = react.useRef(null);
  const [color, setColor] = react.useState(value);
  react.useEffect(() => setColor(value), [value]);
  const emitSetColor = react.useCallback(nextColor => {
    var _a2;
    const fieldPatches = type.fields.filter(field => field.name in nextColor).map(field => {
      const nextFieldValue = nextColor[field.name];
      const isObject = field.type.jsonType === "object";
      return sanity.set(isObject ? Object.assign({
        _type: field.type.name
      }, nextFieldValue) : nextFieldValue, [field.name]);
    });
    onChange([sanity.setIfMissing({
      _type: type.name
    }), sanity.set(type.name, ["_type"]), sanity.set((_a2 = nextColor.rgb) == null ? void 0 : _a2.a, ["alpha"]), ...fieldPatches]);
  }, [onChange, type]);
  const debouncedColorChange = react.useMemo(() => lodash.debounce(emitSetColor, 100), [emitSetColor]);
  const handleColorChange = react.useCallback(nextColor => {
    setColor(nextColor);
    debouncedColorChange(nextColor);
  }, [debouncedColorChange, setColor]);
  const handleCreateColor = react.useCallback(() => {
    setColor(DEFAULT_COLOR);
    emitSetColor(DEFAULT_COLOR);
  }, [emitSetColor]);
  const handleUnset = react.useCallback(() => {
    setColor(void 0);
    onChange(sanity.unset());
  }, [onChange]);
  return /* @__PURE__ */jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: value && value.hex ? /* @__PURE__ */jsxRuntime.jsx(ColorPicker, {
      color,
      onChange: handleColorChange,
      readOnly: readOnly || typeof type.readOnly === "boolean" && type.readOnly,
      disableAlpha: !!((_a = type.options) == null ? void 0 : _a.disableAlpha),
      onUnset: handleUnset
    }) : /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
      icon: icons.AddIcon,
      mode: "ghost",
      text: "Create color",
      ref: focusRef,
      disabled: Boolean(readOnly),
      onClick: handleCreateColor
    })
  });
}
const round = function () {
  let val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  return Math.round(val * 100);
};
const colorTypeName = "color";
const color = sanity.defineType({
  name: colorTypeName,
  type: "object",
  title: "Color",
  components: {
    input: ColorInput
  },
  fields: [{
    title: "Hex",
    name: "hex",
    type: "string"
  }, {
    title: "Alpha",
    name: "alpha",
    type: "number"
  }, {
    title: "Hue Saturation Lightness",
    name: "hsl",
    type: "hslaColor"
  }, {
    title: "Hue Saturation Value",
    name: "hsv",
    type: "hsvaColor"
  }, {
    title: "Red Green Blue (rgb)",
    name: "rgb",
    type: "rgbaColor"
  }],
  preview: {
    select: {
      title: "hex",
      alpha: "alpha",
      hex: "hex",
      hsl: "hsl"
    },
    prepare(_ref2) {
      let {
        title,
        hex,
        hsl,
        alpha
      } = _ref2;
      let subtitle = hex || "No color set";
      if (hsl) {
        subtitle = "H:".concat(round(hsl.h), " S:").concat(round(hsl.s), " L:").concat(round(hsl.l), " A:").concat(round(alpha));
      }
      return {
        title,
        subtitle,
        media: () => /* @__PURE__ */jsxRuntime.jsx("div", {
          style: {
            backgroundColor: hex != null ? hex : "#000",
            opacity: alpha != null ? alpha : 1,
            position: "absolute",
            height: "100%",
            width: "100%",
            top: "0",
            left: "0"
          }
        })
      };
    }
  }
});
const hsvaColor = sanity.defineType({
  title: "Hue Saturation Value",
  name: "hsvaColor",
  type: "object",
  fields: [{
    name: "h",
    type: "number",
    title: "Hue"
  }, {
    name: "s",
    type: "number",
    title: "Saturation"
  }, {
    name: "v",
    type: "number",
    title: "Value"
  }, {
    name: "a",
    type: "number",
    title: "Alpha"
  }]
});
const colorInput = sanity.definePlugin({
  name: "@sanity/color-input",
  schema: {
    types: [hslaColor, hsvaColor, rgbaColor, color]
  }
});
exports.ColorInput = ColorInput;
exports.color = color;
exports.colorInput = colorInput;
exports.hslaColor = hslaColor;
exports.hsvaColor = hsvaColor;
exports.rgbaColor = rgbaColor;
//# sourceMappingURL=index.js.map
